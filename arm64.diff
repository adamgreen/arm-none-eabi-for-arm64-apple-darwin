diff --git a/build-common.sh b/build-common.sh
index c62f3cf8a4..c42df7fe31 100755
--- a/build-common.sh
+++ b/build-common.sh
@@ -312,12 +312,12 @@ if [ "x$uname_string" == "xlinux" ] ; then
     PACKAGE_NAME_SUFFIX="${host_arch}-linux"
     WGET="wget -q"
 elif [ "x$uname_string" == "xdarwin" ] ; then
-    BUILD=x86_64-apple-darwin10
-    HOST_NATIVE=x86_64-apple-darwin10
+    BUILD=aarch64-apple-darwin20.1.0
+    HOST_NATIVE=aarch64-apple-darwin20.1.0
     READLINK=greadlink
     # Disable parallel build for mac as we will randomly run into "Permission denied" issue.
-    #JOBS=`sysctl -n hw.ncpu`
-    JOBS=1
+    JOBS=`sysctl -n hw.ncpu`
+    #JOBS=1
     GCC_CONFIG_OPTS_LCPP="--with-host-libstdcxx=-static-libgcc -Wl,-lstdc++ -lm"
     MD5="md5 -r"
     PACKAGE_NAME_SUFFIX=mac-$(sw_vers -productVersion)
@@ -337,9 +337,9 @@ fi
 
 SCRIPT=$(basename $0)
 
-RELEASEDATE=$(date +%Y%m%d)
-release_year=$(date +%Y)
-release_month=$(date +%m)
+RELEASEDATE=20200630
+release_year=2020
+release_month=06
 case $release_month in
     01|02|03)
         RELEASEVER=${release_year}-q1-update
diff --git a/build-prerequisites.sh b/build-prerequisites.sh
index e60b862a9c..7a5cbbf01a 100755
--- a/build-prerequisites.sh
+++ b/build-prerequisites.sh
@@ -211,7 +211,7 @@ if [ "x$skip_native_build" != "xyes" ] ; then
     rm -rf $BUILDDIR_NATIVE/libelf && mkdir -p $BUILDDIR_NATIVE/libelf
     pushd $BUILDDIR_NATIVE/libelf
 
-    $SRCDIR/$LIBELF/configure --build=$BUILD \
+    CFLAGS="-Wno-implicit-function-declaration" $SRCDIR/$LIBELF/configure --build=$BUILD \
         --host=$HOST_NATIVE \
         --target=$TARGET \
         --prefix=$BUILDDIR_NATIVE/host-libs/usr \
diff --git a/build-toolchain.sh b/build-toolchain.sh
index 3aa9f7109f..cdaf707496 100755
--- a/build-toolchain.sh
+++ b/build-toolchain.sh
@@ -527,7 +527,7 @@ if [ "x$skip_native_build" != "xyes" ] ; then
         rm -rf $BUILDDIR_NATIVE/gdb && mkdir -p $BUILDDIR_NATIVE/gdb
         pushd $BUILDDIR_NATIVE/gdb
         saveenv
-        saveenvvar CFLAGS "$ENV_CFLAGS"
+        saveenvvar CFLAGS "$ENV_CFLAGS -Wno-implicit-function-declaration"
         saveenvvar CPPFLAGS "$ENV_CPPFLAGS"
         saveenvvar LDFLAGS "$ENV_LDFLAGS"
 
@@ -594,6 +594,11 @@ if [ "x$skip_native_build" != "xyes" ] ; then
         popd
     fi
 
+# I don't want to strip symbols from libraries, create package or build mingw version so stop here.
+if [ "0" == "0" ] ; then
+  exit 0
+fi
+
     echo Task [III-8] /$HOST_NATIVE/pretidy/ | tee -a "$BUILDDIR_NATIVE/.stage"
     rm -rf $INSTALLDIR_NATIVE/lib/libiberty.a
     find $INSTALLDIR_NATIVE -name '*.la' -exec rm '{}' ';'
diff --git a/src/gcc/gcc/config.host b/src/gcc/gcc/config.host
index 816a0f06cb..d2bed94100 100644
--- a/src/gcc/gcc/config.host
+++ b/src/gcc/gcc/config.host
@@ -255,6 +255,10 @@ case ${host} in
     out_host_hook_obj="${out_host_hook_obj} host-i386-darwin.o"
     host_xmake_file="${host_xmake_file} i386/x-darwin"
     ;;
+  aarch64-*-darwin*)
+    out_host_hook_obj="${out_host_hook_obj} host-aarch64-darwin.o"
+    host_xmake_file="${host_xmake_file} aarch64/x-darwin"
+    ;;
   powerpc-*-darwin*)
     out_host_hook_obj="${out_host_hook_obj} host-ppc-darwin.o"
     host_xmake_file="${host_xmake_file} rs6000/x-darwin"
diff --git a/src/gcc/gcc/config/aarch64/host-aarch64-darwin.c b/src/gcc/gcc/config/aarch64/host-aarch64-darwin.c
new file mode 100644
index 0000000000..cedcfd389e
--- /dev/null
+++ b/src/gcc/gcc/config/aarch64/host-aarch64-darwin.c
@@ -0,0 +1,32 @@
+/* aarch64-darwin host-specific hook definitions.
+   Copyright (C) 2003-2019 Free Software Foundation, Inc.
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify it under
+the terms of the GNU General Public License as published by the Free
+Software Foundation; either version 3, or (at your option) any later
+version.
+
+GCC is distributed in the hope that it will be useful, but WITHOUT ANY
+WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+You should have received a copy of the GNU General Public License
+along with GCC; see the file COPYING3.  If not see
+<http://www.gnu.org/licenses/>.  */
+
+#define IN_TARGET_CODE 1
+
+#include "config.h"
+#include "system.h"
+#include "coretypes.h"
+#include "hosthooks.h"
+#include "hosthooks-def.h"
+#include "config/host-darwin.h"
+
+/* Darwin doesn't do anything special for aarch64 hosts; this file exists just
+   to include config/host-darwin.h.  */
+
+const struct host_hooks host_hooks = HOST_HOOKS_INITIALIZER;
diff --git a/src/gcc/gcc/config/aarch64/x-darwin b/src/gcc/gcc/config/aarch64/x-darwin
new file mode 100644
index 0000000000..6d788d5e89
--- /dev/null
+++ b/src/gcc/gcc/config/aarch64/x-darwin
@@ -0,0 +1,3 @@
+host-aarch64-darwin.o : $(srcdir)/config/aarch64/host-aarch64-darwin.c
+	$(COMPILE) $<
+	$(POSTCOMPILE)
diff --git a/src/gcc/gcc/config/host-darwin.c b/src/gcc/gcc/config/host-darwin.c
index 49d3af77a9..557363de09 100644
--- a/src/gcc/gcc/config/host-darwin.c
+++ b/src/gcc/gcc/config/host-darwin.c
@@ -24,7 +24,7 @@
 #include "config/host-darwin.h"
 
 /* Yes, this is really supposed to work.  */
-static char pch_address_space[1024*1024*1024] __attribute__((aligned (4096)));
+static char pch_address_space[1024*1024*1024] __attribute__((aligned (16384)));
 
 /* Return the address of the PCH address space, if the PCH will fit in it.  */
 
diff --git a/src/gdb/gdb/arm-tdep.c b/src/gdb/gdb/arm-tdep.c
index c0c20c55b9..5c8022b96f 100644
--- a/src/gdb/gdb/arm-tdep.c
+++ b/src/gdb/gdb/arm-tdep.c
@@ -2938,12 +2938,32 @@ arm_m_exception_cache (struct frame_info *this_frame)
   struct arm_prologue_cache *cache;
   CORE_ADDR unwound_sp;
   LONGEST xpsr;
+  CORE_ADDR exc_return;
+  int was_psp_used;
+  int is_extended_frame;
+  int stack_regnum;
 
   cache = FRAME_OBSTACK_ZALLOC (struct arm_prologue_cache);
   cache->saved_regs = trad_frame_alloc_saved_regs (this_frame);
 
-  unwound_sp = get_frame_register_unsigned (this_frame,
-					    ARM_SP_REGNUM);
+  /* Determine which stack pointer (PSP or MSP) was used to stack
+     faulting routines registers. */
+  exc_return = get_frame_register_unsigned (this_frame, ARM_LR_REGNUM);
+  was_psp_used = (exc_return & 0xf) == 0xd;
+  is_extended_frame = (exc_return & (1 << 4)) == 0;
+  stack_regnum = ARM_SP_REGNUM;
+  if (was_psp_used)
+    {
+      int psp = user_reg_map_name_to_regnum (gdbarch, "psp", -1);
+      if (psp == -1)
+	{
+	  warning (_("Interrupted code uses PSP but your target doesn't "
+		     "expose that stack pointer."));
+	}
+      else
+	stack_regnum = psp;
+    }
+  unwound_sp = get_frame_register_unsigned (this_frame, stack_regnum);
 
   /* The hardware saves eight 32-bit words, comprising xPSR,
      ReturnAddress, LR (R14), R12, R3, R2, R1, R0.  See details in
@@ -2958,10 +2978,44 @@ arm_m_exception_cache (struct frame_info *this_frame)
   cache->saved_regs[15].addr = unwound_sp + 24;
   cache->saved_regs[ARM_PS_REGNUM].addr = unwound_sp + 28;
 
+  if (is_extended_frame)
+    {
+      LONGEST fpccr;
+
+      /* Can skip extracting floating pointer registers if the lazy stack
+         is still active. */
+      if (safe_read_memory_integer (0xE000EF34, 4, byte_order, &fpccr)
+	  && (fpccr & 1) == 0)
+	{
+	  int s0_offset = user_reg_map_name_to_regnum (gdbarch, "s0", -1);
+	  int fpscr_offset = user_reg_map_name_to_regnum (gdbarch, "fpscr", -1);;
+
+	  if (s0_offset == -1 || fpscr_offset == -1)
+	    {
+	      warning (_("Interrupted code uses FPU but your target doesn't "
+			 "expose the floating pointer registers."));
+	    }
+	  else
+	    {
+	      int i;
+	      int fpu_reg_offset = unwound_sp + 0x20;
+
+	      for (i = 0; i < 16; ++i, fpu_reg_offset += 4)
+		cache->saved_regs[s0_offset + i].addr = fpu_reg_offset;
+	      cache->saved_regs[fpscr_offset].addr = unwound_sp + 0x60;
+	    }
+	}
+      cache->prev_sp = unwound_sp + 0x68;
+    }
+  else
+    {
+      cache->prev_sp = unwound_sp + 0x20;
+    }
+
+
   /* If bit 9 of the saved xPSR is set, then there is a four-byte
      aligner between the top of the 32-byte stack frame and the
      previous context's stack pointer.  */
-  cache->prev_sp = unwound_sp + 32;
   if (safe_read_memory_integer (unwound_sp + 28, 4, byte_order, &xpsr)
       && (xpsr & (1 << 9)) != 0)
     cache->prev_sp += 4;
diff --git a/src/gdb/gdb/ser-unix.c b/src/gdb/gdb/ser-unix.c
index 3492619f2d..070c568e3c 100644
--- a/src/gdb/gdb/ser-unix.c
+++ b/src/gdb/gdb/ser-unix.c
@@ -75,7 +75,7 @@ static int hardwire_setstopbits (struct serial *, int);
 static int
 hardwire_open (struct serial *scb, const char *name)
 {
-  scb->fd = gdb_open_cloexec (name, O_RDWR, 0);
+  scb->fd = gdb_open_cloexec (name, O_RDWR | O_NONBLOCK, 0);
   if (scb->fd < 0)
     return -1;
 
@@ -96,6 +96,9 @@ set_tty_state (struct serial *scb, struct hardwire_ttystate *state)
 {
   if (tcsetattr (scb->fd, TCSANOW, &state->termios) < 0)
     return -1;
+  
+  /* Give USB based serial port one frame to handle baud request. */
+  usleep(2000);
 
   return 0;
 }
@@ -341,7 +344,7 @@ rate_to_code (int rate)
 
   for (i = 0; baudtab[i].rate != -1; i++)
     {
-      /* test for perfect macth.  */
+      /* test for perfect match.  */
       if (rate == baudtab[i].rate)
         return baudtab[i].code;
       else
diff --git a/src/gmp-6.1.0/mpn/arm64/gcd_1.asm b/src/gmp-6.1.0/mpn/arm64/gcd_1.asm
index bc03d80ddf..9c267cb073 100644
--- a/src/gmp-6.1.0/mpn/arm64/gcd_1.asm
+++ b/src/gmp-6.1.0/mpn/arm64/gcd_1.asm
@@ -82,13 +82,13 @@ C Both U and V are single limbs, reduce with bmod if u0 >> v0.
 	b.hi	L(red1)
 
 L(bmod):mov	x3, #0			C carry argument
-	bl	mpn_modexact_1c_odd
+	bl	GSYM_PREFIX`'mpn_modexact_1c_odd
 	b	L(red0)
 
 L(nby1):cmp	n, #BMOD_1_TO_MOD_1_THRESHOLD
 	b.lo	L(bmod)
 
-	bl	mpn_mod_1
+	bl	GSYM_PREFIX`'mpn_mod_1
 
 L(red0):mov	x3, x0
 L(red1):cmp	x3, #0
diff --git a/src/gmp-6.1.0/mpn/arm64/invert_limb.asm b/src/gmp-6.1.0/mpn/arm64/invert_limb.asm
index a94b0e9611..bb876d97c5 100644
--- a/src/gmp-6.1.0/mpn/arm64/invert_limb.asm
+++ b/src/gmp-6.1.0/mpn/arm64/invert_limb.asm
@@ -41,9 +41,9 @@ C Compiler generated, mildly edited.  Could surely be further optimised.
 ASM_START()
 PROLOGUE(mpn_invert_limb)
 	lsr	x2, x0, #54
-	adrp	x1, approx_tab
+	adrp	x1, approx_tab@PAGE
 	and	x2, x2, #0x1fe
-	add	x1, x1, :lo12:approx_tab
+	add	x1, x1, approx_tab@PAGEOFF
 	ldrh	w3, [x1,x2]
 	lsr	x4, x0, #24
 	add	x4, x4, #1
