#! /usr/bin/env bash
# Copyright 2020 Adam Green (adamgreen@users.noreply.github.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Logs the command to be run and then executes the command while logging the results.
RunAndLog () {
    echo `date` Executing $@>>$LOGFILE
    $@ 1>>$LOGFILE 2>$ERRORFILE
    if [ "$?" != "0" ] ; then
        cat $ERRORFILE >>$LOGFILE
        echo `date` Failure forced early exit>>$LOGFILE
        cat $LOGFILE
        rm -f $ERRORFILE
        popd >/dev/null
        read -n 1 -sp "Press any key to continue..." dummy ; echo
        exit 1
    fi
}


# Setup script variables.
ROOTDIR=$0
ROOTDIR=${ROOTDIR%/*}
pushd $ROOTDIR
ROOTDIR=$PWD
LOGFILE=$ROOTDIR/gnu_install.log
ERRORFILE=$ROOTDIR/gnu_install.err
GCC4ARM_VERSION=gcc-arm-none-eabi-9-2020-q2-update
GCC4ARM_FILENAME=gcc-arm-none-eabi-9-2020-q2-update-mac.tar.bz2
GCC4ARM_URL=https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/9-2020q2/$GCC4ARM_FILENAME
GCC4ARM_TAR=$ROOTDIR/$GCC4ARM_FILENAME
GCC4ARM_MD5=75a171beac35453fd2f0f48b3cb239c3
GCC4ARM_EXTRACT=$ROOTDIR/$GCC4ARM_VERSION
GCC4ARM_DIR=$ROOTDIR/gcc-arm-none-eabi
GCC4ARM_BINDIR=$GCC4ARM_DIR/bin
GCC4ARM_BINDIR2=$GCC4ARM_DIR/arm-none-eabi/bin
MACBIN_DIR=$ROOTDIR


echo Logging install results to $LOGFILE
echo `date` Starting $0 $*>$LOGFILE

echo Downloading GNU Tools for ARM Embedded Processors...
echo `date` Executing curl -L0 $GCC4ARM_URL>>$LOGFILE
curl -L0 $GCC4ARM_URL >$GCC4ARM_FILENAME

echo Validating md5 signature of GNU Tools for ARM Embedded Processors...
echo `date` Validating md5 signature of GNU Tools for ARM Embedded Processors>>$LOGFILE
archive_match=`md5 -q $GCC4ARM_FILENAME | grep -c $GCC4ARM_MD5`
if [ "$archive_match" != "1" ] ; then
    echo $GCC4ARM_FILENAME failed MD5 signature check.>>$LOGFILE
    echo `date` Failure forced early exit>>$LOGFILE
    cat $LOGFILE
    rm -f $ERRORFILE
    popd >/dev/null
    read -n 1 -sp "Press any key to continue..." dummy ; echo
    exit 1
fi

echo Extracting GNU Tools for ARM Embedded Processors...
rm -r $GCC4ARM_DIR >/dev/null 2>/dev/null
RunAndLog tar xf $GCC4ARM_TAR
RunAndLog mv $GCC4ARM_EXTRACT $GCC4ARM_DIR

echo Updating to 64-bit ARM macOS binaries...
RunAndLog cp $MACBIN_DIR/arm-none-eabi-*        $GCC4ARM_BINDIR/
RunAndLog cp $MACBIN_DIR/arm-none-eabi-ar       $GCC4ARM_BINDIR2/ar
RunAndLog cp $MACBIN_DIR/arm-none-eabi-as       $GCC4ARM_BINDIR2/as
RunAndLog cp $MACBIN_DIR/arm-none-eabi-ld       $GCC4ARM_BINDIR2/ld
RunAndLog cp $MACBIN_DIR/arm-none-eabi-ld.bfd   $GCC4ARM_BINDIR2/ld.bfd
RunAndLog cp $MACBIN_DIR/arm-none-eabi-nm       $GCC4ARM_BINDIR2/nm
RunAndLog cp $MACBIN_DIR/arm-none-eabi-objcopy  $GCC4ARM_BINDIR2/objcopy
RunAndLog cp $MACBIN_DIR/arm-none-eabi-objdump  $GCC4ARM_BINDIR2/objdump
RunAndLog cp $MACBIN_DIR/arm-none-eabi-ranlib   $GCC4ARM_BINDIR2/ranlib
RunAndLog cp $MACBIN_DIR/arm-none-eabi-readelf  $GCC4ARM_BINDIR2/readelf
RunAndLog cp $MACBIN_DIR/arm-none-eabi-strip    $GCC4ARM_BINDIR2/strip

echo Cleaning up intermediate files...
RunAndLog rm $GCC4ARM_TAR

echo
echo The GNU Tools for ARM Embedded Processors can now be found in:
echo $GCC4ARM_DIR
echo
echo Its binaries can be found in:
echo $GCC4ARM_DIR/bin
echo


# Restore current directory and exit script on success.
echo `date` Finished successfully>>$LOGFILE
echo Finished successfully
rm -f $ERRORFILE
popd >/dev/null
read -n 1 -sp "Press any key to continue..." dummy ; echo
